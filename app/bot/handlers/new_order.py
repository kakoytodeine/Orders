from telebot.types import CallbackQuery

from app.bot.bot_instance import bot
from app.bot.keyboards import get_inline_keyboard_category, user_pages_by_cart, cart, create_cart_keyboard, \
    get_category_by_user, get_main_menu, temp_messages
from app.db.db_session import SessionLocal
from app.services import CategoryService, ProductService, UserService, OrderService
from app.logger import logger


@bot.callback_query_handler(func=lambda call: call.data == "new_order")
def handle_start_order(call: CallbackQuery):
    tg_id = call.from_user.id
    
    if tg_id in temp_messages:
        try:
            bot.delete_message(call.message.chat.id, temp_messages[tg_id])
        except:
            pass
        temp_messages.pop(tg_id)
    
    bot.answer_callback_query(call.id)
    bot.edit_message_text(f'üè∑Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:',
                          call.message.chat.id,
                          call.message.message_id,
                          reply_markup=get_inline_keyboard_category(sep='2_2'))


@bot.callback_query_handler(func=lambda call: call.data == "back_to_add_category")
def back_to_add_category(call: CallbackQuery):
    tg_id = call.from_user.id
    
    if tg_id in user_pages_by_cart:
        user_pages_by_cart.pop(tg_id)
    
    bot.answer_callback_query(call.id, f"–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞–∑–∞–¥")
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text=f'üè∑Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:',
        reply_markup=get_inline_keyboard_category('2_2')
    )


@bot.callback_query_handler(func=lambda call: call.data.startswith('category2_2'))
def process_category(call: CallbackQuery):
    category_id = int(call.data.split('2_2')[1])
    user_tg_id = call.from_user.id
    try:
        with SessionLocal() as session:
            category_service = CategoryService(session=session)
            product_service = ProductService(session=session)
            
            cart[user_tg_id] = {}  # –î–æ–±–∞–≤–ª—è–µ–º —é–∑–µ—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É
            products = product_service.get_products_by_category(category_id)  # –°–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
            category = category_service.get_category_by_id(category_id)
            
            for prod in products:  # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã –≤ –∫–æ—Ä–∑–∏–Ω—É —é–∑–µ—Ä–∞ user.id
                cart[user_tg_id][prod.name] = {
                    'id': prod.id,
                    'target': prod.target_quantity,
                    'actual': 0,
                    'category': category.name,
                }
            keyboard = create_cart_keyboard(user_tg_id, sep="_")
            bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text="üì¶ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:\n"
                     "(–ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ —Ç–æ–≤–∞—Ä —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ –æ–¥–∏–Ω)",
                reply_markup=keyboard)
            bot.answer_callback_query(call.id,
                                      text=f"–í—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è {category.name}")
    except Exception as e:
        logger.error(f'Error started order {e}')
        bot.send_message(chat_id=call.message.chat.id,
                         text='–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ.')


@bot.callback_query_handler(func=lambda call: call.data.startswith('product_'))
def show_product_quantity(call: CallbackQuery):
    product_id = int(call.data.split('_')[1])
    user_tg_id = call.from_user.id
    
    with SessionLocal() as session:
        product_service = ProductService(session=session)
        product = product_service.get_product_by_id(product_id)
        
        current_markup = call.message.reply_markup

        
        if cart[user_tg_id][product.name]["target"] > 0:
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ 1
            cart[user_tg_id][product.name]['actual'] += 1
            
            if cart[user_tg_id][product.name]["actual"] > cart[user_tg_id][product.name]['target']:
                cart[user_tg_id][product.name]["actual"] = 0
                bot.answer_callback_query(call.id,
                                          text=f"–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –ø–æ –ø—Ä–æ–¥—É–∫—Ç—É {product.name}, –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–±—Ä–æ—à–µ–Ω–æ")
            else:
                bot.answer_callback_query(call.id,
                                          text=f'{product.name} + 1 –§–∞–∫—Ç: {cart[user_tg_id][product.name]["actual"]}')
        else:
            bot.answer_callback_query(call.id,
                                      text=f"–ü—Ä–æ–¥—É–∫—Ç {product.name} —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç—Å—è –≤—Ä—É—á–Ω—É—é. –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ.",
                                      show_alert=True)
    
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = create_cart_keyboard(user_tg_id, sep="_")
        
        # –ú–µ–Ω—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞ –Ω–æ–≤—É—é
        bot.edit_message_reply_markup(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            reply_markup=keyboard
        )

@bot.callback_query_handler(func=lambda call: call.data == 'finished_order')  # –õ–æ–≤–∏–º –∫–æ–ª–ª –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞
def add_order_in_bd(call: CallbackQuery):
    user_tg_id = call.from_user.id
    
    with SessionLocal() as session:
        order_service = OrderService(session=session)
        user_service = UserService(session=session)
        category_service = CategoryService(session=session)
        
        user_id = user_service.get_user_by_tg_id(call.from_user.id).id
        category_name = get_category_by_user(user_tg_id)  # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω—ç–π–º
        category_id = category_service.get_category_by_name(category_name).id  # –ü–æ–ª—É—á–∞–µ–º –∏–¥ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        items = []  # —Å–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –∞–π—Ç–µ–º—ã –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã —é–∑–µ—Ä–∞
        for product, data in cart[user_tg_id].items():
            items.append({
                'product_id': data['id'],
                'actual_quantity': data['actual']
            })
        new_order = order_service.create_order(user_id=user_id, category_id=category_id, items=items)  # –ù–æ–≤—ã–π –∑–∞–∫–∞–∑
        bot.edit_message_text(chat_id=call.message.chat.id,
                              message_id=call.message.message_id,
                              text=f'üìå –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
                              reply_markup=get_main_menu(user_tg_id),
                              )
        bot.answer_callback_query(call.id, text=f'–ó–∞–∫–∞–∑ ‚Ññ{new_order["order_id"]} —É—Å–ø–µ—à–Ω–æ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω',
                                  show_alert=True)


@bot.callback_query_handler(func=lambda call: call.data in ["prev_page", "next_page"])
def paginate_cart(call: CallbackQuery):
    user_tg_id = call.from_user.id
    try:
        with SessionLocal() as session:
            user_service = UserService(session=session)
            if user_tg_id not in user_pages_by_cart:
                return
            if call.data == "prev_page":
                user_pages_by_cart[user_tg_id]["current_page"] -= 1
                bot.answer_callback_query(call.id, f"Prev page")
            elif call.data == "next_page":
                user_pages_by_cart[user_tg_id]["current_page"] += 1
                bot.answer_callback_query(call.id, f"Next page")
            
            kb = create_cart_keyboard(user_tg_id, sep="_")
            
            bot.edit_message_reply_markup(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                reply_markup=kb
            )
    except Exception as e:
        logger.error(f"Error {e}")