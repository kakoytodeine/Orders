from telebot.types import CallbackQuery
from app.bot.bot_instance import bot
from app.bot.keyboards import  get_last_order_keyboard, cart
from app.db.db_session import SessionLocal
from app.services import UserService, OrderService, ProductService


@bot.callback_query_handler(func=lambda call: call.data == "last_order")
def get_last_order(call: CallbackQuery):
    bot.answer_callback_query(call.id)
    tg_id = call.from_user.id
    
    
    bot.edit_message_text(chat_id=call.message.chat.id,
                          message_id=call.message.message_id,
                          text="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞:",
                          reply_markup=get_last_order_keyboard())


@bot.callback_query_handler(
    func=lambda call: call.data in ["with_actual_zeros_product", "without_actual_zeros_product"])
def get_actual_order(call: CallbackQuery):
    tg_id = call.from_user.id
    bot.answer_callback_query(call.id)
    with SessionLocal() as session:
        user_service = UserService(session=session)
        order_service = OrderService(session=session)
        product_service = ProductService(session=session)
        
        user = user_service.get_user_by_tg_id(tg_id)
        last_order = order_service.get_last_order(user.id)
        products = {p.name:p.target_quantity for p in product_service.get_all_products()}
        
        if last_order:
            order_id = last_order.id
            order = order_service.get_order_report(order_id)
            day = last_order.created_at
            msg_text = (f'üÜî –ó–∞–∫–∞–∑ ‚Ññ{order_id} (–æ—Ç {str(day)[:10]})\n'
                        f'‚ùóÔ∏è–í–æ—Å–∫–ª–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –∑–Ω–∞–∫ - —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —è—á–µ–π–∫–∞ —ç—Ç–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞\n'
                        f'{"-" * 33}\n')
            
            # –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ —Å actual_quantity == 0
            already_warned = set()
            already_displayed = set()  # –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω—ã
            
            for i in order['items']:
                # –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä —Å actual_quantity == 0 –∏ –Ω–µ –±—ã–ª –µ—â–µ –¥–æ–±–∞–≤–ª–µ–Ω
                if products[i["product_name"]] == 0 and i['product_name'] not in already_warned:
                    msg_text += f"‚ùóÔ∏è{i['product_name']} | {i['to_order']} –±–ª.\n"
                    already_warned.add(i['product_name'])
                    already_displayed.add(i['product_name'])  # –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–Ω—ã–π
                
                # –õ–æ–≥–∏–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤
                if call.data == "without_actual_zeros_product" and i["to_order"] > 0:
                    if i['product_name'] not in already_displayed:
                        msg_text += f"{i['product_name']} | {i['to_order']} –±–ª.\n"
                        already_displayed.add(i['product_name'])
                
                elif call.data == "with_actual_zeros_product":
                    # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã, –≤–∫–ª—é—á–∞—è —Å actual_quantity != 0, –Ω–æ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∏ –µ—â–µ –Ω–µ –±—ã–ª–∏ –ø–æ–∫–∞–∑–∞–Ω—ã
                    if i["product_name"] not in already_displayed:
                        msg_text += f"{i['product_name']} | {i['to_order']} –±–ª.\n"
                        already_displayed.add(i['product_name'])
            
            # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–ª–∏–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            def send_long_message(chat_id, text, chunk_size=4000):
                message_id = None
                for i in range(0, len(text), chunk_size):
                    msg = bot.send_message(chat_id, text[i:i + chunk_size], parse_mode='HTML')
                    message_id = msg.message_id  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º id –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∫—É—Å–∫–∞
                return message_id
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            last_msg_id = send_long_message(call.message.chat.id, msg_text)