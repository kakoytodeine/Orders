import re

from telebot.types import CallbackQuery, Message

from app.bot.bot_instance import bot
from app.bot.keyboards import  get_inline_keyboard_category, get_keyboard_add_product
from app.bot.temp_message import _clear_temp_message, _save_temp_message
from app.db.db_session import SessionLocal
from app.logger import logger
from app.services import CategoryService, ProductService


@bot.callback_query_handler(func=lambda call: call.data == "add_product")
def add_product_by_category(call: CallbackQuery):
    tg_id = call.from_user.id
    chat_id = call.message.chat.id
    bot.answer_callback_query(call.id)

    # —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    # _clear_temp_message(chat_id, tg_id)

    try:
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (—Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π)
        bot.edit_message_text(
            chat_id=chat_id,
            message_id=call.message.message_id,
            text="üè∑Ô∏è –í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∫—É–¥–∞ –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä:",
            reply_markup=get_inline_keyboard_category("3_3")
        )
        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —ç—Ç–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ temp (–∏—Å–ø–æ–ª—å–∑—É–µ–º message_id, –∫–æ—Ç–æ—Ä—ã–π –º—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–ª–∏)
        _save_temp_message(tg_id, call.message.message_id)
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏: {e}. –û—Ç–ø—Ä–∞–≤–ª—é –Ω–æ–≤–æ–µ.")
        try:
            msg = bot.send_message(chat_id, "üè∑Ô∏è –í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∫—É–¥–∞ –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä:",
                                   reply_markup=get_inline_keyboard_category("3_3"))
            _save_temp_message(tg_id, msg.message_id)
        except Exception as send_err:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏: {send_err}")


@bot.callback_query_handler(func=lambda call: call.data.startswith("category3_3"))
def process_selected_category(call: CallbackQuery):
    tg_id = call.from_user.id
    chat_id = call.message.chat.id
    category_id = int(call.data.split("3_3")[1])

    bot.answer_callback_query(call.id)

    try:
        # –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ –∂–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–∫–æ—Ç–æ—Ä–æ–µ –±—ã–ª–æ)
        bot.edit_message_text(
            chat_id=chat_id,
            message_id=call.message.message_id,
            text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_keyboard_add_product(category_id)
        )
        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ temp_messages
        _save_temp_message(tg_id, call.message.message_id)
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ': {e}. –û—Ç–ø—Ä–∞–≤–ª—é –Ω–æ–≤–æ–µ.")
        try:
            msg = bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_keyboard_add_product(category_id))
            _save_temp_message(tg_id, msg.message_id)
        except Exception as send_err:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ': {send_err}")


@bot.callback_query_handler(func=lambda call: call.data.startswith("add_new_product_"))
def add_new_product_by_category(call: CallbackQuery):
    tg_id = call.from_user.id
    chat_id = call.message.chat.id
    category_id = int(call.data.split("_")[3])
    bot.answer_callback_query(call.id)

    # –ü–æ–ø—ã—Ç–∫–∞ —É–±—Ä–∞—Ç—å inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É (–Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ, –µ—Å–ª–∏ —É–ø–∞–¥—ë—Ç)
    try:
        bot.edit_message_reply_markup(chat_id=chat_id, message_id=call.message.message_id, reply_markup=None)
    except Exception as e:
        logger.debug(f"edit_message_reply_markup –Ω–µ —É–¥–∞–ª—Å—è: {e}")

    # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ"), —á—Ç–æ–±—ã –Ω–µ –æ—Å—Ç–∞–≤–ª—è—Ç—å –µ–≥–æ –≤–∏—Å–µ—Ç—å
    _clear_temp_message(chat_id, tg_id)

    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤–≤–æ–¥ –∫–∞–∫ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–∏ —Å—Ä–∞–∑—É —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ id)
        msg = bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞\nüì¶ –ù–∞–∑–≤–∞–Ω–∏–µ + –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: Winston 10)")
        _save_temp_message(tg_id, msg.message_id)
        bot.register_next_step_handler(msg, check_to_correct_name_product, category_id)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞: {e}")
        try:
            bot.send_message(chat_id, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—Ä–æ—Å–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        except Exception:
            pass


def check_to_correct_name_product(message: Message, category_id: int):
    tg_id = message.chat.id
    chat_id = message.chat.id
    msg_text = (message.text or "").strip()

    pattern = r'^(?P<name>[\w–ê-–Ø–∞-—è–Å—ë\s\-]{2,}?)\s+(?P<qty>\d{1,2})$'
    match = re.match(pattern, msg_text)

    # –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π ‚Äî —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ), –∑–∞–º–µ–Ω–∏—Ç—å –±–æ—Ç-—Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –ø–æ–¥—Å–∫–∞–∑–∫—É –∏ –∂–¥–∞—Ç—å —Å–Ω–æ–≤–∞
    if not match:
        try:
            bot.delete_message(chat_id, message.message_id)
        except Exception:
            # –µ—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî –æ–∫, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
            pass

        # —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ (–ø–æ–¥—Å–∫–∞–∑–∫—É)
        _clear_temp_message(chat_id, tg_id)
        try:
            hint = bot.send_message(chat_id, "‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ: –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ + –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: Winston 10)")
            _save_temp_message(tg_id, hint.message_id)
            bot.register_next_step_handler(hint, check_to_correct_name_product, category_id)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–º –≤–≤–æ–¥–µ: {e}")
        return

    name_product = match.group("name").strip()
    target_quantity = int(match.group("qty"))

    try:
        with SessionLocal() as session:
            product_service = ProductService(session=session)
            category_service = CategoryService(session=session)

            category = category_service.get_category_by_id(category_id)
            if not category:
                _clear_temp_message(chat_id, tg_id)
                try:
                    m = bot.send_message(chat_id, "‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                    _save_temp_message(tg_id, m.message_id)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–æ–±—â–µ–Ω–∏–∏ –æ –Ω–µ–Ω–∞–π–¥–µ–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {e}")
                return

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç
            existing = product_service.get_product_by_name_in_category(name_product, category_id)
            if existing:
                # —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—á—Ç–æ–±—ã –Ω–µ –∑–∞—Å–æ—Ä—è—Ç—å)
                try:
                    bot.delete_message(chat_id, message.message_id)
                except Exception:
                    pass

                _clear_temp_message(chat_id, tg_id)
                try:
                    m = bot.send_message(chat_id,
                                         f"‚ö†Ô∏è –ü—Ä–æ–¥—É–∫—Ç *{name_product}* —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –∏–º—è:",
                                         parse_mode="Markdown")
                    _save_temp_message(tg_id, m.message_id)
                    bot.register_next_step_handler(m, check_to_correct_name_product, category_id)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –æ –¥—É–±–ª–∏–∫–∞—Ç–µ: {e}")
                return

            # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç
            try:
                product_service.create_product_for_admin(name_product, target_quantity, category_id)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ –±–∞–∑–µ: {e}")
                _clear_temp_message(chat_id, tg_id)
                try:
                    m = bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞")
                    _save_temp_message(tg_id, m.message_id)
                except Exception:
                    pass
                return

            # –£—Å–ø–µ—Ö: —É–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (—á—Ç–æ–±—ã –Ω–µ –æ—Å—Ç–∞–≤–ª—è—Ç—å –≤–≤–æ–¥) –∏ —Å—Ç–∞—Ä–æ–µ temp, –∑–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å –∫–ª–∞–≤–æ–π
            try:
                bot.delete_message(chat_id, message.message_id)
            except Exception:
                pass

            _clear_temp_message(chat_id, tg_id)
            try:
                m = bot.send_message(chat_id,
                                     f"‚úÖ –ü—Ä–æ–¥—É–∫—Ç *{name_product}* –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é {category.name}",
                                     parse_mode="Markdown",
                                     reply_markup=get_keyboard_add_product(category_id))
                _save_temp_message(tg_id, m.message_id)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞: {e}")

    except Exception as e:
        logger.error(f"–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ check_to_correct_name_product: {e}")
        _clear_temp_message(chat_id, tg_id)
        try:
            m = bot.send_message(chat_id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞")
            _save_temp_message(tg_id, m.message_id)
        except Exception:
            pass
